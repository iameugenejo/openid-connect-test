{
  "name": "openid-connect",
  "version": "1.2.2",
  "keywords": [
    "oauth",
    "oauth2",
    "oauth2 server",
    "oauth2 provider",
    "openid server",
    "identity provider",
    "server",
    "openid",
    "connect",
    "openid connect"
  ],
  "description": "This is an fully functional OAuth 2 server implementation, with support for OpenID Connect specification. Based on https://github.com/ammmir/node-oauth2-provider.",
  "homepage": "https://github.com/agmoyano/OpenIDConnect",
  "repository": {
    "type": "git",
    "url": "https://github.com/agmoyano/OpenIDConnect.git"
  },
  "author": {
    "name": "Agust√≠n Moyano"
  },
  "main": "index",
  "dependencies": {
    "extend": "1.1.3",
    "sails-redis": "git://github.com/balderdashy/sails-redis",
    "modelling": "*",
    "q": "0.9.6",
    "jwt-simple": "0.1.0",
    "lodash": "*",
    "base64url": "*",
    "clean-obj": "*"
  },
  "directories": {
    "example": "./examples"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ammmir/node-oauth2-provider/blob/master/LICENSE"
    }
  ],
  "readme": "# OAuth 2 Server with OpenID Connect support\n\nThis is a fully functional OAuth 2 server implementation, with support for OpenID Connect specification. Based on https://github.com/ammmir/node-oauth2-provider.\n\n## News\n\nMajor rewrite. Now we use [modelling](https://www.npmjs.org/package/modelling) for Model part.\n\n## Install\n\nInstall via npm:\n\n    npm install --save openid-connect\n\nYou can add it to your Connect or Express application as another middleware.\nBe sure to enable the `bodyParser` and `query` middleware.\n\nTo use it inside your project, just do:\n\n```\nvar oidc = require('openid-connect').oidc(options);\n```\n\nand then, for example, with express\n\n```\napp.get('/authorization', oidc.auth());\n```\n## Options\n\nWhen you require openid-connect, you may specify options. If you specify them, it must be with a json object with the following properties (all of them are optional):\n\n* __login_url__\n\n  URL where login form can be found. Defaults to _\"/login\"_.\n\n* __consent_url__\n\n  URL where consent form can be found. Defaults to _\"/consent\"_.\n\n* __scopes__\n\n  Json object of type { _scope name_: _scope description_, ... } used to define custom scopes. \n\n* __models__\n\n  Models as described in [modelling](https://www.npmjs.org/package/modelling).\n  \n  Actually OpenIDConnect defines 6 models:\n  \n  * _user_: Where user data is stored (email, password, etc).\n  * _client_: Where user can register a client app that will use your project for authentication/authorization.\n  * _consent_: Where user consent of certain scopes for a particular client is stored.\n  * _auth_: Where authorization data is stored (token, expiration date, etc).\n  * _access_: Where access data is stored (token, expiration date, etc).\n  * _refresh_: Where refresh data is stored (token, expiration date, etc).\n\n  You can overwrite any part of any model of OpenIDConnect, or overwrite all of them.\n  \n  If you overwrite user model, the new model _should_ conform with [OpenID Connect Standard Claims](http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims), in order to comply with the spec.\n  \n* __adapters__\n  \n  Adapters as described in [modelling](https://www.npmjs.org/package/modelling).\n  \n* __connections__\n  \n  Connections as described in [modelling](https://www.npmjs.org/package/modelling).\n  \n* __policies__\n  \n  Policies as described in [modelling](https://www.npmjs.org/package/modelling).\n  \n* __alien__\n\n  You can use your own Waterline collections with OpenIDConnect. \n  \n  If you define an alien collection with the same name of one of the models in OpenIDConnect, the last one will be replaced.\n  \n  For example:\n  \n  ```\n  var orm = new Waterline();\n  \n  var MyUserModel = Waterline.collection.extend({\n  \tidentity: 'user',\n  \t//Collection definition here.\n  });\n  \n  var MyUsersCarModel = Waterline.collection.extend({\n  \tidentity: 'car',\n  \t//Collection definition here.\n  });\n  \n  var config = {\n\tcollections: {\n\t\tuser: MyUserModel, //replace OpenIDConnect user model. \n\t\tcar: MyUsersCarModel //add new model\n\t}\n  }\n  \n  orm.initialize(config, function(err, result) {\n  \tvar options = {\n  \t\talien: result.collections\n  \t}\n  \n  \tvar oidc = require('openid-connect').oidc(options);\n  \n  \tapp.get('/cars', oidc.use(['user', 'car']), function(req, res, next) {\n  \t\t...\n  \t});\n  });\n  ```\n  \n  __Beware__ that if you replace an OpenIDConnect model, you won't be able to use _populate_ with other OpenIDConnect models.\n  \n  If you replace user model, the new model _should_ conform with [OpenID Connect Standard Claims](http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims), in order to comply with the spec.\n\n* __orm__\n\n  You can replace the whole OpenIDConnect modelling instance with your own. \n  \n  __Beware__ that you __must__ implement at _least_ all models and exept for `user` model, all attributes. \n  \n  If in your models, you set `autoPK` to false, they __must__ have an `id` attribute that is primary key.\n  \n  _Notice_ that you can get OpenIDConnect's default models with `require('openid-connect').defaults().models`.\n  \n  ```\n  var orm = new modelling(options);\n  \n  var oidc = require('openid-connect').oidc({orm: orm});\n  ```\n\n## API\n\n* **auth()**\n\n  returns a function to be placed as middleware in connect/express routing methods. For example:\n\n  ```\n  app.get('/authorization', oidc.auth());\n  ```\n \n  This is the authorization endpoint, as described in [http://tools.ietf.org/html/rfc6749#section-3.1](http://tools.ietf.org/html/rfc6749#section-3.1)\n\n* **consent()**\n\n  returns a function to be placed as middleware in connect/express routing methods. For example:\n \n  ```\n  app.post('/consent', oidc.consent());\n  ```\n \n  This method saves the consent of the resource owner to a client request, or returns an access_denied error.\n\n* **token()**\n\n  returns a function to be placed as middleware in connect/express routing methods. For example:\n \n  ```\n  app.get('/token', oidc.token());\n  ```\n \n  This is the token endpoint, as described in [http://tools.ietf.org/html/rfc6749#section-3.2](http://tools.ietf.org/html/rfc6749#section-3.2)\n\n* **check(scope, ...)**\n \n  returns a function to be placed as middleware in connect/express routing methods. For example:\n \n  ```\n  app.get('/api/user', oidc.check('openid', /profile|email/), function(req, res, next) { ... });\n  ```\n\n  If no arguments are given, checks if user is logged in.\n \n  Arguments may be of type _string_ or _regexp_.\n \n  This function is used to check if user logged in, if an access_token is present, and if certain scopes where granted to it.\n\n* **removetokens()**\n\n  returns a function to be placed as middleware in connect/express routing methods. For example:\n  \n  ```\n  app.get('/logout', oidc.removetokens(), function(req, res, next) { ... });\n  ```\n  \n  This function removes all tokens that were issued to the user.\n  \n  *access_token* is required either as a parameter or as a Bearer token.\n  \n* **userInfo()**\n\n  returns a function to be placed as middleware in connect/express routing methods. For example:\n\n  ```\n  app.get('/api/user', oidc.userInfo());\n  ```\n\n  This function returns the user info in a json object. Checks for scope and login are included.\n\n* **use([name])**\n\n  Same description as in [modelling](https://www.npmjs.org/package/modelling). If you defined _alien_ models or your own _orm_ you can call those models as well.\n  \n* **getOrm()**\n\n  Retrieves current _orm_ of instance.\n \n## Example\n\nThere is a complete example [here](https://github.com/agmoyano/OpenIDConnect/tree/master/examples).\n\n## Help!\n\nAny suggestions, bug reports, bug fixes, pull requests, etc, are very wellcome ([here](https://github.com/agmoyano/OpenIDConnect/issues)). \n\nThanks for reading!.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/agmoyano/OpenIDConnect/issues"
  },
  "_id": "openid-connect@1.2.2",
  "_shasum": "a9fcb816c5a9f5a2ee4473e043b41479551867d4",
  "_from": "openid-connect@",
  "_resolved": "https://registry.npmjs.org/openid-connect/-/openid-connect-1.2.2.tgz"
}
